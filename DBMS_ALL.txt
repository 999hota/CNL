EXP 1


/* -----CREATING TABLE-----*/

CREATE TABLE EMP(
EMPNO NUMBER(10) PRIMARY KEY,
ENAME VARCHAR2(20),
JOB CHAR(20),
MGR NUMBER(10),
HIREDATE DATE,
SAL NUMBER(10),
COMM NUMBER(10),
DEPTNO NUMBER(10) REFERENCES DEPT(DNO)); // foreign key

CREATE TABLE DEPT(
DNO NUMBER(10) PRIMARY KEY,
DNAME VARCHAR2(20),
LOC VARCHAR2(20));

/* ------ ADDING A NEW COLUMN --------- */

ALTER TABLE EMP
ADD PHONENUMBER VARCHAR2(10);

/* ----- CHANGE DATA TYPE ----- */
ALTER TABLE EMP
MODIFY JOB VARCHAR2(20);

/* ---- REMOVE ATTRIBUTE ----*/
ALTER TABLE EMP
DROP COLUMN PHONENUMBER;

DESC EMP;
DESC DEPT;

INSERT INTO EMP VALUES(7369 ,'Smith', 'Clerk' ,7902, '17-DEC-80' , 800, NULL, 20);


INSERT INTO DEPT VALUES(10,'accounting','New York');


CREATE TABLE SALESPERSON(
SNUM NUMBER(10),
SNAME VARCHAR(20),
CITY CHAR(10),
COMM CHAR(25));

DROP TABLE SALESPERSON;

10.

TABLE WITH CONSTRAINTS - CLIENTNO MUST START WITH C
NAME MUST NOT BE NULL
CREATE TABLE CLIENT_MASTER(
CLIENTNO VARCHAR2(6) CHECK(CLIENTNO LIKE 'C%') PRIMARY KEY,
NAME VARCHAR2(20) NOT NULL,
CITY VARCHAR2(15),
PINCODE NUMBER(8),
STATE VARCHAR2(15),
BALANCEDUE NUMBER(10,2)
);

PRODUCTNO STARTS WITH P, SP AND CP >0
CREATE TABLE PRODUCT_MASTER(
PRODUCTNO VARCHAR2(6) CHECK(PRODUCTNO LIKE 'P%') PRIMARY KEY, 
DESCRIPTION VARCHAR2(15) NOT NULL,
PROFITPERCENT NUMBER(4,2) NOT NULL,
UNITMEASURE VARCHAR2(10) NOT NULL,
QTYINHAND NUMBER(8) NOT NULL,
REORDERLVL NUMBER(8) NOT NULL,
SELLPRICE NUMBER(8,2) NOT NULL CHECK(SELLPRICE > 0),
COSTPRICE NUMBER(8,2) NOT NULL CHECK(COSTPRICE > 0));

CREATE TABLE SALESMAN_MASTER(
SALESMANNO VARCHAR2(6) CHECK(SALESMANNO LIKE 'S%') PRIMARY KEY,
NAME VARCHAR2(20) NOT NULL,
ADDRESS1 VARCHAR2(10) NOT NULL,
ADDRESS2 VARCHAR2(10),
CITY VARCHAR2(20),
PINCODE NUMBER(7),
STATE VARCHAR(20),
SAL NUMBER(8,2) NOT NULL CHECK(SAL<>0),
TGTTOGET NUMBER(6,2) NOT NULL CHECK(TGTTOGET<>0),
YTDSALES NUMBER(6,2) NOT NULL,
REMARKS VARCHAR2(20));


DELYTYPE DEFAULT F AND CAN BE EITHER P OR F
DELYDATE CANNOT BE LESS THAN ORDER DATE
ORDERSTATUS VALUES IN IN PROCESS/FULFILLED/BACKORDER/CANECLLED

CREATE TABLE SALES_ORDER(
ORDERNO VARCHAR2(6) CHECK(ORDERNO LIKE 'O%') PRIMARY KEY,
ORDERDATE DATE,
CLIENTNO VARCHAR2(6) REFERENCES CLIENT_MASTER(CLIENTNO),
DELYADDRESS VARCHAR2(25),
SALESMANNO VARCHAR2(6)  REFERENCES SALESMAN_MASTER(SALESMANNO),
DELYTYPE CHAR(1) DEFAULT 'F' CHECK(DELYTYPE IN('P','F')),
BILLEDYN CHAR(1),
DELYDATE DATE,
ORDERSTATUS VARCHAR2(10) CHECK(ORDERSTATUS IN ('IN PROCESS','FULFILLED','BACKORDER','CANCELLED')),
CONSTRAINT CHK_DELYDATE CHECK(DELYDATE>=ORDERDATE));


CREATE TABLE SALES_ORDER_DETAILS(
ORDERNO VARCHAR2(6) REFERENCES SALES_ORDER(ORDERNO),
PRODUCTNO VARCHAR2(6) REFERENCES PRODUCT_MASTER(PRODUCTNO),
QTYORDERED NUMBER(8),
QTYDISP NUMBER(8),
PRODUCTRATE NUMBER(10,2),
PRIMARY KEY (ORDERNO,PRODUCTNO));



EXP 2

----------Assignment 2----------
	
	SECOND LETTER A:

1.SELECT NAME
FROM CLIENT_MASTER
WHERE ENAME LIKE '_a%';

2.SELECT *
FROM CLIENT_MASTER
WHERE NAME LIKE '_a%';

 STAYS IN A SPECIFIC CITY

3. SELECT *
FROM CLIENT_MASTER
WHERE CITY IN('Mumbai','Delhi');

4. SELECT *
FROM CLIENT_MASTER
WHERE BALANCEDUE>10000;

    MATCH MONTH FROM DATE
    ORDERS PLACED IN JANUARY OR A SPECIFIC MONTH

5. SELECT *
FROM SALES_ORDER
WHERE TO_CHAR(ORDERDATE,'MON')='JAN';

6. SELECT *
FROM CLIENT_MASTER
WHERE CLIENTNO IN('C00001','C00002');

7. SELECT *
FROM pRODUCT_MASTER
WHERE SELLPRICE>=2000 AND SELLPRICE<=5000;

8. SELECT * FROM PRODUCT_MASTER
WHERE SELLPRICE>1500;
SELECT SELLPRICE*0.15 AS NEW_PRICE
FROM PRODUCT_MASTER;

9. 

	NOT IN A SPECIFIC STATE

SELECT NAME,CITY,STATE
FROM CLIENT_MASTER
WHERE STATE<>'Maharashtra';

10. SELECT COUNT(*) FROM SALES_ORDER;
 
11. SELECT AVG(SELLPRICE)
FROM PRODUCT_MASTER;

12. SELECT MAX(SELLPRICE) AS MAX_PRICE, MIN(SELLPRICE) AS MIN_PRICE
FROM PRODUCT_MASTER;

13. SELECT COUNT(*)
FROM PRODUCT_MASTER
WHERE SELLPRICE>=1500;

14. SELECT *
FROM PRODUCT_MASTER
WHERE QTYINHAND<REORDERLVL;

15. SELECT ORDERNO, TO_CHAR(ORDERDATE,'DAY')
FROM SALES_ORDER;


EXP 3


CREATE TABLE EMP_68(
EMPNO NUMBER(10) PRIMARY KEY CHECK(EMPNO>=7000 AND EMPNO<=8000),
EMPNAME VARCHAR2(10),
JOB VARCHAR(20),
MGR NUMBER(10) CHECK(MGR>=7000 AND MGR<=8000),
HIREDATE DATE,
SAL NUMBER(10),
COMM NUMBER(10) DEFAULT 0 CHECK(COMM<1500),
DEPT_NAME VARCHAR2(10));


1.SELECT EMPNAME FROM EMP_68 WHERE JOB<>'Manager';
2.SELECT EMPNAME FROM EMP_68 WHERE EMPNAME LIKE '_i%';

TOTAL NUMBER OF MANAGERS

3.SELECT COUNT(*) FROM EMP_68 WHERE JOB LIKE 'Manager';

DISPLAY HIGHEST LOWEST AND AVG SALARY

4.SELECT MAX(SAL) "MAXIMUM", MIN(SAL) "MINIMUM", SUM(SAL) "TOTAL",AVG(SAL) "AVERAGE"
FROM EMP_68;

HIGHEST LOWEST AVERAGE AVG SALARY FOR EACH JOB TYPE

5.SELECT MAX(SAL) "MAXIMUM", MIN(SAL) "MINIMUM", SUM(SAL) "TOTAL",AVG(SAL) "AVERAGE"
FROM EMP_68 GROUP BY JOB;

 NUMBER OF MANAGERS

6.SELECT COUNT(*) "Number of managers" FROM EMP_68 WHERE JOB LIKE 'Manager';

HIRED AFTER A SPECIFIC DATE

7. SELECT * FROM EMP_68 WHERE HIREDATE>'01-JAN-1980';

MAX AND MIN SAL IN A SPECIFIC DEPARTMENT OR A SPECIFIC JOB

8.SELECT EMPNAME FROM EMP_68 
WHERE SAL=(SELECT MAX(SAL) FROM EMP_68 WHERE JOB LIKE 'Salesman');
9.SELECT EMPNAME FROM EMP_68 
WHERE SAL=(SELECT MIN(SAL) FROM EMP_68 WHERE JOB LIKE 'Clerk');

SALARY MORE/LESS THAN A SPECIFIC EMPLOYEE

10.SELECT EMPNAME FROM EMP_68 
WHERE SAL>(SELECT SAL FROM EMP_68 WHERE EMPNAME LIKE 'Turner');
11.SELECT DEPT_NAME FROM EMP_68 
WHERE EMPNAME='Ford';
12.SELECT DEPT_NAME FROM EMP_68 WHERE SAL=(SELECT MAX(SAL) FROM EMP_68);


EXP 5


CREATE TABLE SAILORS(
S_ID VARCHAR2(10) PRIMARY KEY,
S_NAME VARCHAR2(20),
RATING NUMBER(2),
AGE NUMBER(2));

CREATE TABLE BOATS(
B_ID VARCHAR2(10) PRIMARY KEY,
B_NAME VARCHAR2(20),
COLOR VARCHAR2(10));

CREATE TABLE RESERVES(
S_ID VARCHAR2(10) REFERENCES SAILORS(S_ID),
B_ID VARCHAR2(10) REFERENCES BOATS(B_ID),
DAY VARCHAR2(15),
PRIMARY KEY(S_ID,B_ID));



COLOR OF BOATS RESERVED BY TARUN

2A. SELECT B.COLOR FROM BOATS B,RESERVES R, SAILORS S WHERE
S.S_NAME LIKE 'TARUN' AND S.S_ID=R.S_ID AND B.B_ID=R.B_ID;

SAILORS WHO HAVE RESERVED BOATS ON MONDAY

B. SELECT S.S_ID,S.S_NAME FROM RESERVES R, SAILORS S WHERE
R.DAY LIKE 'MONDAY' AND S.S_ID=R.S_ID;

  RED AND GREEN BOAT IDS AND BOAT NAMES

C. SELECT B.B_ID, B.B_NAME FROM BOATS B,RESERVES R WHERE
B.COLOR IN ('RED','GREEN') AND B.B_ID=R.B_ID;


REMOVE SAILORS MORE THAN 60 YEARS OLD

D. DELETE FROM SAILORS WHERE AGE>60;



1. SELECT NAME FROM TEACHER WHERE 
TID IN(SELECT TID FROM TAUGHTBY WHERE
SUBNO IN(SELECT SUBNO FROM SUBJECT WHERE  
SUBTITLE LIKE 'THERMODYNAMICS')) AND DEPT LIKE 'PHYSICS';

2. UPDATE SUBJECT SET SUBTITLE='RDBMS' WHERE SUBTITLE='DBMS';

3. SELECT * FROM STUDENT WHERE CITY LIKE 'KOLKATA'
 AND ROLLNO>20 AND ROLLNO<25;

4. SELECT * FROM STUDENT WHERE CITY LIKE 'KOLKATA'
ORDER BY ROLLNO DESC;


/* ----- DUAL ----*/


1. SELECT 2+5 FROM DUAL;
SELECT 2*5 FROM DUAL;
SELECT 6/3 FROM DUAL;
SELECT 5-2 FROM DUAL;

2.SELECT SYSTIMESTAMP FROM DUAL;

3.SELECT UPPER('sqlshack') FROM DUAL;

4. SELECT SUBSTR('ABCDEFG',3,4) "Substring" FROM DUAL;

5. SELECT TO_DATE(CURRENT_DATE-1) FROM DUAL;
SELECT TO_DATE(CURRENT_DATE+1) FROM DUAL;

6. SELECT TO_CHAR(DATE '2035-09-26','MONTH') FROM DUAL;
SELECT TO_CHAR(DATE '2035-09-26','YEAR') FROM DUAL;

7. SELECT COS(90) FROM DUAL;
SELECT SIN(90) FROM DUAL;
SELECT TAN(90) FROM DUAL;

8.SELECT
CEIL(41.8) AS ceil_test,
FLOOR(41.8) AS floor_test,
ABS(13.333) AS ABS_TEST
FROM dual;
select dbms_random.value(1,9) num from dual;

SQUARE ROOT DUAL 

9.SELECT SQRT(5) "Square root" FROM DUAL;

10.SELECT LOWER('IVAN BAYROSS') FROM DUAL;

11.SELECT UPPER('IVAN BAYROSS') FROM DUAL;

DISPLAY DATE IN A PARTICULAR FORMAT

12.SELECT TO_DATE(SYSDATE,'DD-MM-YYYY') FROM DUAL;

NUMBER OF MONTHS BETWEEN DATES

13. SELECT MONTHS_BETWEEN 
   (TO_DATE('JUL-02-2001','MM-DD-YYYY'),
    TO_DATE('JAN-02-2001','MM-DD-YYYY') ) "Months"
    FROM DUAL;

14. 

ADD MONTHS TO CURRENT DATE

SELECT TO_CHAR(
     ADD_MONTHS(SYSDATE,5),
     'DD-MON-YYYY') "5 months later" FROM DUAL;

ROUND OFF DUAL

15. SELECT ROUND(15.19,1) FROM dual;


JOINS


 
 
 
-------------------QUERIES--------------------
1.SELECT PNO,PNAME FROM PARTS WHERE PRICE<20;
2.SELECT PNO FROM ODETAILS;
3.SELECT CNAME FROM CUSTOMERS_1 WHERE CNAME LIKE 's%';

ORDERS NOT SHIPPED

4. SELECT ONO,CNAME FROM ORDERS O,CUSTOMERS_1 C WHERE O.CNO=C.CNO
AND SHIPPED=NULL;

WHICH CUSTOMER PLACED ORDER THROUGH WHICH EMPLOYEE

5.SELECT DISTINCT CNAME ,ENAME FROM CUSTOMERS_1 C, EMPLOYEES E,ORDERS O
WHERE O.CNO=C.CNO AND O.ENO=E.ENO;

HIRED AT THE EARLIEST DATE / MAX EXPERIENCE EMPLOYEE/ MOST EXPERIENCED EMPLOYEE

6. SELECT ENAME FROM EMPLOYEES WHERE HDATE=(SELECT MIN(HDATE) FROM EMPLOYEES);


7.SELECT PNO,PNAME,PRICE FROM PARTS WHERE PRICE>20000 ORDER BY PNO ASC;
8. SELECT P.PNO, P.PNAME, O.QTY*P.PRICE AS "TOTAL SALES"
FROM PARTS P, ODETAILS O WHERE P.PNO=O.PNO;

TOTAL QUANTITY OF ITEMS ORDERED

9.SELECT SUM(QTY) FROM ODETAILS WHERE PNO=10601;
10. SELECT ENO FROM EMPLOYEES WHERE ZIP IN(SELECT ZIP FROM ZIPCODES 
WHERE CITY LIKE 'Mumbai');
 
 
/************* JOIN JOINS ******/

ALL DISTINCT CITIES FROM TWO TABLES
 
1. SELECT CITY
FROM CUSTOMERS
UNION
SELECT CITY
FROM SUPPLIERS;
 
2. SELECT CITY
FROM CUSTOMERS
UNION ALL
SELECT CITY
FROM SUPPLIERS;
 
ALL GERMAN CITIES FROM 2 TABLES

3. SELECT City, Country FROM Customers
WHERE Country='Germany'
UNION ALL
SELECT City, Country FROM Suppliers
WHERE Country='Germany'
ORDER BY City;

COMMON CITY BETWEEN 2 FIELDS FROM 2 TABLES

4. SELECT CUSTOMERNAME FROM CUSTOMERS
INTERSECT
SELECT SUPPLIERNAME FROM SUPPLIERS;
 
ALL COUNTRY NAMES FROM SUPPLIER TABLE WHICH DO NOT HAVE ANY CUSTOMER IN CUSTOMER TABLE FROM ITS OWN COUNTRY

5. SELECT DISTINCT c.country FROM customers c
WHERE NOT EXISTS (SELECT * FROM suppliers s WHERE s.country = c.country);
 


/********** SUBQUERY **********/

MAX SALARY

1. SELECT FIRST_NAME,LAST_NAME FROM EMPLOYEE WHERE SALARY =
    (SELECT MAX(SALARY) FROM EMPLOYEE);

MAX AND MIN SALARY SPECIFIC JOB

2. SELECT ENAME FROM EMP
WHERE SAL=(SELECT MAX(SAL) FROM EMP
GROUP BY JOB
HAVING JOB LIKE 'Salesman');

3.SELECT ENAME FROM EMP
WHERE SAL=(SELECT MIN(SAL) FROM EMP
GROUP BY JOB
HAVING JOB LIKE 'Clerk');

DEPT WHOSE AVG SALARY IS MAXIMUM

4. SELECT D.DNAME FROM DEPT D
WHERE D.DNO=( SELECT DEPTNO FROM EMP 
GROUP BY DEPTNO 
HAVING AVG(SAL)=(SELECT MAX(AVG(SAL)) FROM EMP 
GROUP BY DEPTNO));

SALARY MORE THAN TURNER

5. SELECT ENAME FROM EMP WHERE SAL>(SELECT SAL FROM EMP WHERE ENAME='Turner');


JOINED AFTER ALLEN

6. SELECT ENAME FROM EMP 
WHERE HIREDATE>(SELECT HIREDATE FROM EMP WHERE ENAME LIKE 'Allen');

DEPT WHERE FORD WORKS

7. SELECT DNAME FROM DEPT WHERE DNO=(SELECT DEPTNO FROM EMP
WHERE ENAME='Ford');


DEPT WHERE SALARY MAX

8. SELECT DNAME FROM DEPT WHERE DNO=(SELECT DEPTNO FROM EMP
WHERE SAL=(SELECT MAX(SAL) FROM EMP));


SMITH'S CITY

9. SELECT LOC FROM DEPT WHERE DNO=(SELECT DEPTNO FROM EMP
WHERE ENAME='Smith');


MANAGER'S CITY

10. SELECT LOC FROM DEPT WHERE DNO IN(SELECT DEPTNO FROM EMP
WHERE JOB='Manager');

MARTIN'S GRADE

11. SELECT COMM FROM EMP WHERE ENAME LIKE 'Martin';

EVERY EMPLOYEE WHO EARNS MORE THAN CITY OF DALLAS

12. SELECT ENAME FROM EMP WHERE SAL>(SELECT MAX(SAL) FROM EMP
WHERE DEPTNO IN (SELECT DNO FROM DEPT WHERE LOC='Dallas'));

DEPT WITH NO EMPLOYEES

13. SELECT DNAME FROM DEPT WHERE DNO NOT IN(SELECT DEPTNO FROM EMP);

JOINED ON THE SAME DATE AS ADAMS

14. SELECT ENAME FROM EMP WHERE HIREDATE=(SELECT HIREDATE FROM EMP WHERE ENAME LIKE 'Adams');

DEPT THAT GETS COMMISSION

15. SELECT DNAME FROM DEPT WHERE DNO IN(SELECT DEPTNO FROM EMP WHERE COMM IS NOT NULL);

LOWEST SALARY IN EACH DEPARTMENT

16. SELECT ENAME FROM EMP WHERE SAL IN(SELECT MIN(SAL) FROM EMP GROUP BY DEPTNO);

DEPARTMENTS WITH MORE THAN ONE EMPLOYEE

17. SELECT DNAME FROM DEPT WHERE EXISTS(SELECT DEPTNO FROM EMP GROUP BY DEPTNO HAVING COUNT(*)>1 AND EMP.DEPTNO=DEPT.DNO);




EXP 8

/******** VIEWS *******/

CUSTOMERS WITH HIGHEST RATING


#1
CREATE VIEW HIGHEST_RATING AS SELECT CNAME FROM CUSTOMER WHERE
RATING = (SELECT MAX(RATING) FROM CUSTOMER);

NO. OF SALESPERSON IN EACH CITY


#2
CREATE VIEW NO_OF_SALESPERSON AS SELECT COUNT(*) "COUNT",CITY FROM
SALESPEOPLE GROUP BY CITY;

AVG AND TOTAL ORDER OF EACH SALESPERSON


#3
CREATE VIEW AVG_AND_TOTAL AS SELECT AVG(AMT) "AVERAGE",COUNT(*) "TOTAL
ORDERS" FROM ORDERS8 GROUP BY SNUM;

EACH SALESPERSON WITH MULTIPLE CUSTOMERS

#4
CREATE VIEW MULTIPLE_CUSTOMERS AS SELECT SNAME FROM SALESPEOPLE
WHERE SNUM IN(SELECT SNUM FROM CUSTOMER GROUP BY SNUM HAVING
COUNT(*)>1);
#5
CREATE VIEW SALESPEOPLE_CUSTOMER_ORDERS AS SELECT DISTINCT
S.SNAME,C.CNAME,O.ONUM FROM SALESPEOPLE S,CUSTOMER C, ORDERS8 O
WHERE
S.SNUM=C.SNUM AND C.CNUM=O.CNUM AND O.SNUM=S.SNUM;

CREATE VIEW WITH ONLY 2 FIELDS AND INSERT COMMISSION VALUES

#6
CREATE VIEW SALESPEOPLE_VIEW AS SELECT SNUM,COMM FROM SALESPEOPLE;
UPDATE SALESPEOPLE-VIEW SET COMM=COMM+200 WHERE COMM BETWEEN 1000
AND 2000;
INSERT INTO SALESPEOPLE_VIEW(6,1800);



/************* PREV YEAR **********/

--------SET 1-----------
CREATE TABLE EMP(
EMP_NO NUMBER(10) PRIMARY KEY,
EMP_NAME VARCHAR2(20),
JOB VARCHAR2(20) 
MGR NUMBER(10),
HIREDATE DATE,
SAL NUMBER(10),
COMM NUMBER(10),
DEPTNO NUMBER(10));


1. LIST THE EMPS WHO JOINED ON 1MAY81 AND 3 OTHER DATES IN ASC ORDER OF SENIORITY
2.Find the details of highest and lowest paid employee.
3. List the employees whose annual salary ranging from 22000 and 45000 .
4. LIST THE EMPS THOSE ARE HAVING FIVE CHARACTERS IN THEIR NAMES
5. LIST THE EMPS THOSE ARE HAVING FOUR CHARS AND THIRD CHAR MUST BE 'R'
6. List the employees who joined in January.
7. LIST THE EMPS WHOSE NAMES HAVING A CHAR SET 'II' TOGETHER
8. LIST THE EMPS THOSE WHO JOINED IN 80S AND 90S


1. SELECT EMP_NO,EMP_NAME WHERE HIREDATE IN('1-MAY-81','31-DEC-81','17-DEC-81,'19-JAN-80')
ORDER BY HIREDATE ASC;

2. SELECT * FROM EMP WHERE SAL=(SELECT MAX(SAL) FROM EMP);
SELECT * FROM EMP WHERE SAL=(SELECT MIN(SAL) FROM EMP);

3. SELECT EMP_NAME WHERE SAL>=22000 AND SAL<=45000;

4. SELECT EMP_NAME FROM EMP WHERE EMP_NAME LIKE '_____';

5. SELECT EMP_NAME FROM EMP WHERE EMP_NAME LIKE '__S_';

6. SELECT EMP_NAME FROM EMP WHERE TO_CHAR(HIREDATE,'MON')='JAN';

7. SELECT EMP_NAME FROM EMP WHERE NAME LIKE '%LL%' OR NAME LIKE 'LL%' OR NAME LIKE '%LL';

8. SELECT EMP_NAME WHERE HIREDATE BETWEEN '1-JAN-80' AND '1-JAN-99';


-----------SET 2-------------


1. SELECT DISTINCT JOB FROM EMP;

2. SELECT * FROM EMP ORDER BY SAL ASC;

3. SELECT DISTINCT(JOB) FROM EMP ORDER BY JOB DESC;

4. SELECT * FROM EMP WHERE JOB LIKE 'MANAGER';

5.	SELECT *
  	FROM EMPLOYEES E
	WHERE HIRE_DATE IN
		(SELECT MIN(HIRE_DATE)
		FROM EMPLOYEES
		WHERE E.DEP_ID = DEP_ID)
	ORDER BY HIRE_DATE DESC;

6. SELECT EMPNO,EMP_NAME,SAL,SAL/30 AS DAILY_SAL ORDER BY SAL DESC;

7. SELECT EMPNO,EMP_NAME FROM EMP WHERE JOB LIKE 'MANAGER';

8. SELECT * FROM EMP WHERE SAL=(SELECT MAX(SAL) FROM EMP WHERE SAL<>(SELECT MAX(SAL) FROM EMP);


--------------SET 3----------------
CREATE TABLE EMP(
EMP_NO NUMBER(10) PRIMARY KEY,
EMP_NAME VARCHAR2(20),
JOB VARCHAR2(20) 
MGR NUMBER(10),
HIREDATE DATE,
SAL NUMBER(10),
COMM NUMBER(10),
DEPTNO NUMBER(10) REFERENCES DEPT(DEPTNO));

CREATE TABLE DEPT(
DEPTNO NUMBER(10) PRIMARY KEY,
DNAME VARCHAR2(20),
LOC VARCHAR2(20));

1. List the most recently hired emp HRD belongs to the Loc KOLKATA.
2. Display the number of emp for each job group deptno wise
3. List the emps in dept 20 whose sal > the avg sal of deptno 10 emps.
4. List the details of the dept where the max no of emp are working
5. List the emp who are not working in sales dept
6. List the emp name, dept, sal & comm. For those whose salary is between 2000 and 5000 while
loc is KOLKATA.
7. List the name, job, dname, loc for those who are working as a ‘MGRs
8. List the emp name, job, salary, and dname except ‘CLERK’sand sort on the basis of highest
salary.


1. SELECT EMP_NAME FROM EMP WHERE HIREDATE=(SELECT MAX(HIREDATE) FROM EMP) AND
DEPTNO=(SELECT DEPTNO FROM DEPT WHERE LOC LIKE 'KOLKATA' AND DNAME LIKE 'HRD');

2. SELECT DNAME, COUNT(EMP_NAME) FROM EMP NATURAL JOIN DEPT GROUP BY DNAME;

3. SELECT * FROM EMP WHERE DEPTNO=20 AND SAL>(SELECT AVG(SAL) FROM EMP WHERE DEPTNO=10);

4. SELECT * FROM DEPT 
WHERE DEPTNO IN(SELECT DEPTNO FROM EMP
	GROUP BY DEPTNO 
		HAVING COUNT(*) IN(SELECT MAX(MYCOUNT) FROM 
			(SELECT COUNT *)))

5. SELECT EMP_NAME FROM EMP WHERE DEPTNO NOT IN(SELECT DEPTNO FROM DEPT WHERE DNAME LIKE 'SALES');

6. SELECT E.EMP_NAME,D.DNAME,E.SAL,E.COMM FROM EMP E, DEPT D WHERE E.SAL BETWEEN 2000 AND 5000
AND E.DEPTNO IN(SELECT DEPTNO FROM DEPT WHERE LOC LIKE 'KOLKATA');

7. SELECT EMP_NAME,JOB,DNAME, LOC FROM EMP NATURAL JOIN DEPT WHERE JOB LIKE 'MANAGER';

8. SELECT EMP_NAME,JOB,SAL,DNAME FROM EMP NATURAL JOIN DEPT WHERE DNAME<>'CLERK' ORDER BY SAL DESC;


--------SET 4-----------

Create the following tables in SQL and enter required tuples.
Customer ( cust_id, cust_name, annual_revenue, cust_type)
• Cust_id must be between 100 and 10,000.
• Cust_type must be 'MANUFACTURER', 'WHOLESALER', or 'RETAILER'.
City (city_name, population)
Shipment (shipment_no, cust_id, weight, truck _no, destination, ship_date)
• Foreign key: cust_id references customer on delete cascade.
• destination references city, truck_no references Truck.
• Weight must be under 1000.
Truck (truck_no, driver_name)
Express the following queries in SQL:
1) Give names of customer who have sent packages (shipments) to Kolkata, Chennai and Munbai.
2) List the names of the driver who have delivered shipments weighing over 200 kilos.
3) Retrieve the maximum and minimum weights of the shipments. Rename the output as “Max_Weight”
and “Min_ Weight” respectively.
4) For each customer, what is the average weight of package sent by that customer?
5) List the names and populations of cities that have received shipments weighing over 100 pounds.


create table Customer(
cust_id number(8) primary key check (cust_id>=100 and cust_id<=10000), 
cust_name varchar2(20), 
annual_revenue number(10), 
cust_type varchar2(15) check(cust_type in ('MANUFACTURER','WHOLESALER','RETAILER')));

CREATE TABLE CITY(
CITY_NAME VARCHAR2(20) PRIMARY KEY,
POPULATION NUMBER(30));

CTREATE TABLE TRUCK(
TRUCK_NO NUMBER(10) PRIMARY KEY,
DRIVER_NAME VARCHAR(20));

CREATE TABLE SHIPMENT(
SHIPMENT_NO NUMBER(10),
CUST_ID NUMBER(10),
WEIGHT NUMBER(5) CHECK(WEIGHT<1000),
TRUCK_NO NUMBER(10),
DESTINATION VARCHAR2(20),
SHIP_DATE DATE,
PRIMARY KEY (SHIPMENT_NO,CUST_ID),
FOREIGN KEY CUST_ID REFERENCES CUSTOMER(CUST_ID) ON DELETE CASCADE,
FOREIGN KEY DESTINATION REFERENCES CITY(CITY_NAME),
FOREIGN KEY TRUCK_NO REFERENCES TRUCK(TRUCK_NO));

1. SELECT CUST_NAME FROM CUSTOMER 
	WHERE CUST_ID IN(SELECT CUST_ID FROM SHIPMENT 
					WHERE DESTINATION IN ('KOLKATA','CHENNAI','MUMBAI'));

2. SELECT DRIVER_NAME FROM TRUCK 
	WHERE TRUCK_NO IN(SELECT TRUCK_NO FROM SHIPMENT WHERE WEIGHT>200);

3. SELECT MAX(WEIGHT) AS "MAX_WEIGHT", MIN(WEIGHT) AS "MIN_WEIGHT" FROM SHIPMENT;

4. SELECT CUST_ID,AVG(WEIGHT) FROM SHIPMENT GROUP BY CUST_ID;

5. SELECT CITY_NAME,POPULATION FROM CITY 
	WHERE CITY_NAME IN(SELECT DESTINATION FROM SHIPMENT 
		GROUP BY DESTINATION HAVING SUM(WEIGHT)>100);


---------------SET 5---------------


Create the following tables in SQL and enter required Tuples.
Customer ( cust_id, cust_name, annual_revenue, cust_type)
• Cust_id must be between 100 and 10,000.
• Cust_type must be 'MANUFACTURER', 'WHOLESALER', or 'RETAILER'.
City (city_name, population)
Shipment (shipment_no, cust_id, weight, truck _no, destination, ship_date)
• Foreign key: cust_id references customer on delete cascade.
• destination references city, truck_no references Truck.
• Weight must be under 1000.
Truck (truck_no, driver_name)
Express the following queries in SQL:
1 For each city, what is the maximum weight of a package sent to that city?
2 List the name and annual revenue of customers whose shipments have been delivered by truck driver 'BARUN'.
3 List drivers who have delivered shipments to every city.
4 For each city, with population over ONE LAKH, what is the minimum weight of a package sent to that city.
5 List cities that have received minimum shipments from every customer


create table Customer(
cust_id number(8) primary key check (cust_id>=100 and cust_id<=10000), 
cust_name varchar2(20), 
annual_revenue number(10), 
cust_type varchar2(15) check(cust_type in ('MANUFACTURER','WHOLESALER','RETAILER')));

CREATE TABLE CITY(
CITY_NAME VARCHAR2(20) PRIMARY KEY,
POPULATION NUMBER(30));

CTREATE TABLE TRUCK(
TRUCK_NO NUMBER(10) PRIMARY KEY,
DRIVER_NAME VARCHAR(20));

CREATE TABLE SHIPMENT(
SHIPMENT_NO NUMBER(10),
CUST_ID NUMBER(10),
WEIGHT NUMBER(5) CHECK(WEIGHT<1000),
TRUCK_NO NUMBER(10),
DESTINATION VARCHAR2(20),
SHIP_DATE DATE,
PRIMARY KEY (SHIPMENT_NO,CUST_ID),
FOREIGN KEY CUST_ID REFERENCES CUSTOMER(CUST_ID) ON DELETE CASCADE,
FOREIGN KEY DESTINATION REFERENCES CITY(CITY_NAME),
FOREIGN KEY TRUCK_NO REFERENCES TRUCK(TRUCK_NO));

1. SELECT MAX(WEIGHT) FROM SHIPMENT GROUP BY DESTINATION;

2. SELECT CUST_NAME, ANNUAL_REVENUE FROM CUSTOMER
	WHERE CUST_ID IN(SELECT CUST_ID FROM SHIPMENT
		WHERE TRUCK_ID IN(SELECT TRUCK_ID FROM TRUCK
			WHERE DRIVER_NAME LIKE 'BARUN'));

3. 

4. SELECT MIN(WEIGHT) FROM SHIPMENT 
	WHERE DESTINATION IN(SELECT CITY_NAME FROM CITY 
		GROUP BY CITY_NAME HAVING POPULATION>100000);

5. 


---------------SET 6-------------------
CREATE TABLE EMP(
EMP_NO NUMBER(10) PRIMARY KEY,
EMP_NAME VARCHAR2(20),
JOB VARCHAR2(20) 
MGR NUMBER(10),
HIREDATE DATE,
SAL NUMBER(10),
COMM NUMBER(10),
DEPTNO NUMBER(10));

1. SELECT EMP_NAME WHERE COMM IS NULL;

2. SELECT EMP_NAME FROM EMP WHERE JOB NOT IN('PRESIDENT','MANAGER') ORDER BY SAL ASC;

3. SELECT * FROM EMP WHERE HIREDATE<'1-jan-81' OR HIREDATE>'1-JAN-81';

4. SELECT * FROM EMP WHERE MGR IS NOT NULL;

5. SELECT EMP_NAME FROM EMP WHERE TO_CHAR(TO_DATE(HIREDATE,'MM-DD-YYYY'))='JUNE-4-1988';

6. SELECT MGR FROM EMP GRP BY MGR HAVING COUNT(*)=(SELECT MAX(COUNT(*)) FROM EMP GRP BY MGR);

7. SELECT AVG(SAL) AS "AVERAGE SALARY" FROM EMP GROUP BY DEPTNO;

8. SELECT * FROM EMP 
	WHERE SAL IN(SELECT MAX(SAL) FROM EMP 
		WHERE SAL<>(SELECT MAX(SAL) FROM EMP));



nth highest salary

SELECT name, salary 
FROM #Employee e1
WHERE N-1 = (SELECT COUNT(DISTINCT salary) FROM #Employee e2
WHERE e2.salary > e1.salary)
