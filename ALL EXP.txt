EXP5-InetAddressTest

import java.net.*;
class InetAddressTest{
	public static void main(String args[]) throws UnknownHostException{
		
		InetAddress address=InetAddress.getLocalHost();
		System.out.println(address);
		address=InetAddress.getByName("google.com");
		System.out.println(address);
	}
}
----------------------------------------------------------------------------
EXP6-access date and time in client

import java.io.*;
import java.net.*;
import java.util.Date;
public class TimeClient
{
	public static void main(String[] args) throws IOException
	{
		Socket timeSocket=null;
		ObjectInputStream timeIn=null;
		try
		{
			timeSocket=new Socket("localhost",1313);
			timeIn=new ObjectInputStream(timeSocket.getInputStream());
		}
		catch(UnknownHostException e)
		{
			System.err.println("Server 'localhost' is unknown");
			System.exit(1);
		}
		catch(IOException e)
		{
			System.err.println("Error during connection to localhost");
			System.exit(1);
		}
		try
		{
			Date serverDate=(Date)timeIn.readObject();
			System.out.println("Current server time: "+serverDate);
		}
		catch(ClassNotFoundException e)
		{
			System.out.println("Not a date object returned");
			System.exit(1);
		}
		timeIn.close();
		timeSocket.close();
	}
}

*******************************************
import java.io.*;
import java.net.*;
import java.util.Date;
public class TimeServer
{
	public static void main(String[] args) throws IOException
	{
		ServerSocket servSock=null;
		ObjectInputStream timeIn=null;
		try
		{
			servSock=new ServerSocket(1313);
		}
		catch(IOException e)
		{
			System.err.println("could not listen on port : 1313");
			System.exit(1);
		}
		Socket clntSock=null;
		for(;;)
		{
			try
			{
				clntSock=servSock.accept();
			}
			catch(IOException e)
			{
				System.out.println("Accept failed");
				System.exit(1);
			}
			ObjectOutputStream timeOut=new ObjectOutputStream(clntSock.getOutputStream());
			timeOut.writeObject(new Date());
			timeOut.close();
			clntSock.close();
		}
	}
}
------------------------------------------------------------------------------------------
	
EXP7- Echo service

Steps to run Experiment 7-->
-------------------------------------------
TCPEchoServer.java->
javac TCPEchoServer.java
java TCPEchoServer 7

TCPEchoClient.java->
javac TCPEchoClient.java
java TCPEchoClient localhost hi 7
-------------------------------------------
import java.net.*;
import java.io.*;
public class TCPEchoClient
{
	public static void main (String args[]) throws IOException
	{
		if ((args.length<2)||(args.length>3)) throw new IllegalArgumentException ("Parameter(s): <server><Word>[<Port>]");
		String server=args[0];
		byte[] byteBuffer= args[1].getBytes();
		int servPort= (args.length==3)? Integer.parseInt(args[2]): 7;
		Socket sock= new Socket(server, servPort);
		System.out.println("Connected to server... sending Echo string");
		InputStream in= sock.getInputStream();
		OutputStream out= sock.getOutputStream();
		out.write(byteBuffer);
		int totalBytesRevd=0;
		int bytesRevd;
		while (totalBytesRevd < byteBuffer.length)
		{
			if ((bytesRevd= in.read(byteBuffer, totalBytesRevd, byteBuffer.length-totalBytesRevd))== -1)
			throw new SocketException ("Connection closed prematurely.");
			totalBytesRevd+= bytesRevd;
		}
		System.out.println("Received:"+new String (byteBuffer));
		sock.close();
	}
}
*******************************************************************************
import java.net.*;
import java.io.*;
public class TCPEchoServer
{
	private static final int BUFSIZE= 80;
	public static void main (String args[]) throws IOException
	{
		if (args.length!=1) throw new IllegalArgumentException ("Parameter: <Port>");
		int servPort= Integer.parseInt(args[0]);
		ServerSocket servSock= new ServerSocket (servPort);
		int recvMsgSize;
		byte[] byteBuffer= new byte[BUFSIZE];
		for(;;)
		{
			Socket clntSock= servSock.accept();
			InputStream in= clntSock.getInputStream();
			OutputStream out= clntSock.getOutputStream();
			while ((recvMsgSize= in.read(byteBuffer))!=-1)
			out.write(byteBuffer, 0, recvMsgSize);
			clntSock.close();
		}
	}
}
-----------------------------------------------------------------------------------------
EXP8- MUltiCasting

import java.io.*;
import java.util.*;
import java.net.*;

public class multiCastClient {
    public static void main(String[] args) throws IOException {
        MulticastSocket socket = new MulticastSocket(1313);
        InetAddress group = InetAddress.getByName("230.0.0.1");
        socket.joinGroup(group);
        for (int i=0;i<10;i++){
            byte[] bytes = new byte[30];
            DatagramPacket packet = new DatagramPacket(bytes,bytes.length);
            socket.receive(packet);
            String received = new String(packet.getData());
            System.out.println(received);
        }
        socket.leaveGroup(group);
        socket.close();
    }
}
********************************************************
import java.io.*;
import java.util.*;
import java.net.*;

public class multiCastServer {
    public static void main(String[] args) throws IOException,InterruptedException {
        DatagramSocket socket = new DatagramSocket(505);
        for (int i=0;i<10;i++){
            byte[] bytes = new Date().toString().getBytes();
            InetAddress group = InetAddress.getByName("230.0.0.1");
            DatagramPacket packet = new DatagramPacket(bytes,bytes.length,group,1313);
            socket.send(packet);
            Thread.sleep(1500);
        }
        socket.close();
    }
}

----------------------------------------------------------------------------------------
EXP9- Convert string uppercase
import java.io.*;
import java.net .*;
public class StringClient
{
	public static void main(String args[]) throws Exception
	{
		String sentence;
		String modifiedSentence;

		System.out.println("Enter the sentence");

		BufferedReader inFromUser=new BufferedReader(new InputStreamReader(System.in));
		Socket clientSocket=new Socket("localhost",2345);

		DataOutputStream outToServer=new DataOutputStream(clientSocket.getOutputStream());
		BufferedReader inFromServer=new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));

		sentence=inFromUser.readLine();
		outToServer.writeBytes(sentence+'\n');

		modifiedSentence=inFromServer.readLine();
		System.out.println("from server:"+modifiedSentence);
		clientSocket.close();
	}
}
************************************************************
import java.io.*;
import java.net.*;
public class StringServer
{
	public static void main(String args[]) throws Exception
{
	String clientSentence ;
	String capitalizedSentence;
	ServerSocket welcomeSocket = new ServerSocket(2345);
	while(true)
{
	Socket connectionSocket = welcomeSocket.accept();
	BufferedReader inFromClient = new BufferedReader(new InputStreamReader(connectionSocket.getInputStream()));
	DataOutputStream outToClient = new DataOutputStream(connectionSocket.getOutputStream());
	clientSentence = inFromClient.readLine();
	capitalizedSentence = clientSentence.toUpperCase() + '\n';
	outToClient.writeBytes(capitalizedSentence);

}
}
}